{"ast":null,"code":"var _jsxFileName = \"/Users/taylorduggan/Desktop/react-projects/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport DurationSetting from \"../DurationSetting\";\nimport SessionInformation from \"../SessionInformation\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\nconst BREAK_MAX = 15;\nconst BREAK_MIN = 1;\nconst BREAK_STEP = 1;\nconst FOCUS_MAX = 60;\nconst FOCUS_MIN = 5;\nconst FOCUS_STEP = 5;\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  const elapsedSeconds = prevState.timeTotal - timeRemaining;\n  return { ...prevState,\n    timeRemaining,\n    percentComplete: elapsedSeconds / prevState.timeTotal * 100\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        duration: minutesToDuration(breakDuration),\n        timeTotal: breakDuration * 60,\n        timeRemaining: breakDuration * 60,\n        percentComplete: 0\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      duration: minutesToDuration(focusDuration),\n      timeTotal: focusDuration * 60,\n      timeRemaining: focusDuration * 60,\n      percentComplete: 0\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5); //decrease focus\n\n  function decreaseFocus() {\n    setFocusDuration(prevState => Math.max(FOCUS_MIN, prevState - FOCUS_STEP));\n  } //increase focus\n\n\n  function increaseFocus() {\n    setFocusDuration(prevState => Math.min(FOCUS_MAX, prevState + FOCUS_STEP));\n  } //decrease break\n\n\n  function decreaseBreak() {\n    setBreakDuration(prevState => Math.max(BREAK_MIN, prevState - BREAK_STEP));\n  } //increase break\n\n\n  function increaseBreak() {\n    setBreakDuration(prevState => Math.min(BREAK_MAX, prevState + BREAK_STEP));\n  }\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DurationSetting, {\n    label: `Focus Duration: ${minutesToDuration(focusDuration)}`,\n    onDecrease: decreaseFocus,\n    onIncrease: increaseFocus,\n    testid: \"focus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DurationSetting, {\n    label: `Break Duration: ${minutesToDuration(breakDuration)}`,\n    onDecrease: decreaseBreak,\n    onIncrease: increaseBreak,\n    testid: \"break\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    \"data-testid\": \"stop\",\n    title: \"Stop the session\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 15\n    }\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(SessionInformation, {\n    session: session,\n    isPaused: !isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/taylorduggan/Desktop/react-projects/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","minutesToDuration","DurationSetting","SessionInformation","BREAK_MAX","BREAK_MIN","BREAK_STEP","FOCUS_MAX","FOCUS_MIN","FOCUS_STEP","nextTick","prevState","timeRemaining","Math","max","elapsedSeconds","timeTotal","percentComplete","nextSession","focusDuration","breakDuration","currentSession","label","duration","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","decreaseFocus","increaseFocus","min","decreaseBreak","increaseBreak","Audio","play","playPause","nextState","prevStateSession","oi"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport DurationSetting from \"../DurationSetting\";\nimport SessionInformation from \"../SessionInformation\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\nconst BREAK_MAX = 15;\nconst BREAK_MIN = 1;\nconst BREAK_STEP = 1;\n\nconst FOCUS_MAX = 60;\nconst FOCUS_MIN = 5;\nconst FOCUS_STEP = 5;\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  const elapsedSeconds = prevState.timeTotal - timeRemaining;\n  return {\n    ...prevState,\n    timeRemaining,\n    percentComplete: (elapsedSeconds / prevState.timeTotal) * 100,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        duration: minutesToDuration(breakDuration),\n        timeTotal: breakDuration * 60,\n        timeRemaining: breakDuration * 60,\n        percentComplete: 0,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      duration: minutesToDuration(focusDuration),\n      timeTotal: focusDuration * 60,\n      timeRemaining: focusDuration * 60,\n      percentComplete: 0,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  //decrease focus\n  function decreaseFocus() {\n    setFocusDuration((prevState) =>\n      Math.max(FOCUS_MIN, prevState - FOCUS_STEP)\n    );\n  }\n  //increase focus\n  function increaseFocus() {\n    setFocusDuration((prevState) =>\n      Math.min(FOCUS_MAX, prevState + FOCUS_STEP)\n    );\n  }\n  //decrease break\n  function decreaseBreak() {\n    setBreakDuration((prevState) =>\n      Math.max(BREAK_MIN, prevState - BREAK_STEP)\n    );\n  }\n  //increase break\n  function increaseBreak() {\n    setBreakDuration((prevState) =>\n      Math.min(BREAK_MAX, prevState + BREAK_STEP)\n    );\n  }\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <DurationSetting\n            label={`Focus Duration: ${minutesToDuration(focusDuration)}`}\n            onDecrease={decreaseFocus}\n            onIncrease={increaseFocus}\n            testid=\"focus\"\n          />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <DurationSetting\n              label={`Break Duration: ${minutesToDuration(breakDuration)}`}\n              onDecrease={decreaseBreak}\n              onIncrease={increaseBreak}\n              testid=\"break\"\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n       \n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            \n          </div>\n        </div>\n      </div>\n\n      <SessionInformation session = {session} isPaused={!isTimerRunning}/>\n                \n\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}