{"ast":null,"code":"var _jsxFileName = \"/Users/taylorduggan/Desktop/react-projects/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport DurationSetting from \"../DurationSetting\";\nimport SessionInformation from \"../SessionInformation\";\nimport ControlPanel from \"./ControlPanel\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\nconst BREAK_MAX = 15;\nconst BREAK_MIN = 1;\nconst BREAK_STEP = 1;\nconst FOCUS_MAX = 60;\nconst FOCUS_MIN = 5;\nconst FOCUS_STEP = 5;\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  const elapsedSeconds = prevState.timeTotal - timeRemaining;\n  return { ...prevState,\n    timeRemaining,\n    percentComplete: elapsedSeconds / prevState.timeTotal * 100\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        duration: minutesToDuration(breakDuration),\n        timeTotal: breakDuration * 60,\n        timeRemaining: breakDuration * 60,\n        percentComplete: 0\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      duration: minutesToDuration(focusDuration),\n      timeTotal: focusDuration * 60,\n      timeRemaining: focusDuration * 60,\n      percentComplete: 0\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5); //decrease focus\n\n  function decreaseFocus() {\n    setFocusDuration(prevState => Math.max(FOCUS_MIN, prevState - FOCUS_STEP));\n  } //increase focus\n\n\n  function increaseFocus() {\n    setFocusDuration(prevState => Math.min(FOCUS_MAX, prevState + FOCUS_STEP));\n  } //decrease break\n\n\n  function decreaseBreak() {\n    setBreakDuration(prevState => Math.max(BREAK_MIN, prevState - BREAK_STEP));\n  } //increase break\n\n\n  function increaseBreak() {\n    setBreakDuration(prevState => Math.min(BREAK_MAX, prevState + BREAK_STEP));\n  }\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n              duration: minutesToDuration(focusDuration),\n              timeTotal: focusDuration * 60,\n              percentComplete: 0\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  function stopSession() {\n    setIsTimerRunning(false);\n    setSession(null);\n  }\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DurationSetting, {\n    label: `Focus Duration: ${minutesToDuration(focusDuration)}`,\n    onDecrease: decreaseFocus,\n    onIncrease: increaseFocus,\n    testid: \"focus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DurationSetting, {\n    label: `Break Duration: ${minutesToDuration(breakDuration)}`,\n    onDecrease: decreaseBreak,\n    onIncrease: increaseBreak,\n    testid: \"break\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ControlPanel, {\n    onPlayPause: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(SessionInformation, {\n    session: session,\n    isPaused: !isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/taylorduggan/Desktop/react-projects/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","minutesToDuration","DurationSetting","SessionInformation","ControlPanel","BREAK_MAX","BREAK_MIN","BREAK_STEP","FOCUS_MAX","FOCUS_MIN","FOCUS_STEP","nextTick","prevState","timeRemaining","Math","max","elapsedSeconds","timeTotal","percentComplete","nextSession","focusDuration","breakDuration","currentSession","label","duration","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","decreaseFocus","increaseFocus","min","decreaseBreak","increaseBreak","playPause","nextState","prevStateSession","stopSession","Audio","play"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport DurationSetting from \"../DurationSetting\";\nimport SessionInformation from \"../SessionInformation\";\nimport ControlPanel from \"./ControlPanel\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\nconst BREAK_MAX = 15;\nconst BREAK_MIN = 1;\nconst BREAK_STEP = 1;\n\nconst FOCUS_MAX = 60;\nconst FOCUS_MIN = 5;\nconst FOCUS_STEP = 5;\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  const elapsedSeconds = prevState.timeTotal - timeRemaining;\n  return {\n    ...prevState,\n    timeRemaining,\n    percentComplete: (elapsedSeconds / prevState.timeTotal) * 100,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        duration: minutesToDuration(breakDuration),\n        timeTotal: breakDuration * 60,\n        timeRemaining: breakDuration * 60,\n        percentComplete: 0,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      duration: minutesToDuration(focusDuration),\n      timeTotal: focusDuration * 60,\n      timeRemaining: focusDuration * 60,\n      percentComplete: 0,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  //decrease focus\n  function decreaseFocus() {\n    setFocusDuration((prevState) =>\n      Math.max(FOCUS_MIN, prevState - FOCUS_STEP)\n    );\n  }\n  //increase focus\n  function increaseFocus() {\n    setFocusDuration((prevState) =>\n      Math.min(FOCUS_MAX, prevState + FOCUS_STEP)\n    );\n  }\n  //decrease break\n  function decreaseBreak() {\n    setBreakDuration((prevState) =>\n      Math.max(BREAK_MIN, prevState - BREAK_STEP)\n    );\n  }\n  //increase break\n  function increaseBreak() {\n    setBreakDuration((prevState) =>\n      Math.min(BREAK_MAX, prevState + BREAK_STEP)\n    );\n  }\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n              duration: minutesToDuration(focusDuration),\n              timeTotal: focusDuration * 60,\n              percentComplete: 0,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  function stopSession() {\n    setIsTimerRunning(false);\n    setSession(null);\n  }\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <DurationSetting\n            label={`Focus Duration: ${minutesToDuration(focusDuration)}`}\n            onDecrease={decreaseFocus}\n            onIncrease={increaseFocus}\n            testid=\"focus\"\n          />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <DurationSetting\n              label={`Break Duration: ${minutesToDuration(breakDuration)}`}\n              onDecrease={decreaseBreak}\n              onIncrease={increaseBreak}\n              testid=\"break\"\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <ControlPanel \n            onPlayPause={playPause}\n            \n          />\n\n        </div>\n      </div>\n      <div>\n        <div className=\"row mb-2\">\n          <div className=\"col\"></div>\n        </div>\n      </div>\n      <SessionInformation session={session} isPaused={!isTimerRunning} />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}